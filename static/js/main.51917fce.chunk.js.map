{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAround","coord","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","Array","from","length","nrows","forEach","val","nrow","ncols","ncol","Math","random","chanceLightStartsOn","split","map","Number","x","y","flipCell","every","row","includes","setState","rowData","bool","key","console","log","getGameBoard","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAsCeA,G,wDApBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,wDAKPC,GAEVC,KAAKJ,MAAMK,gBAAgBD,KAAKJ,MAAMM,S,+BAItC,IAAIC,EAAU,QAAUH,KAAKJ,MAAMQ,MAAQ,YAAc,IAEzD,OACI,wBAAIC,UAAWF,EAASG,QAASN,KAAKH,kB,GAf3BU,cCcbC,G,wDAEJ,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAGDa,MAAQ,CACXC,QAAQ,EACRC,MAAO,EAAKC,eAEd,EAAKX,gBAAkB,EAAKA,gBAAgBH,KAArB,gBARN,E,0DAmBJ,IAAD,OAGRa,EAAQE,MAAMC,KAAK,CAACC,OAAQf,KAAKJ,MAAMoB,QAY3C,OATAL,EAAMM,SAAQ,SAACC,EAAKC,GAElBR,EAAMQ,GAAQN,MAAMC,KAAK,CAACC,OAAQ,EAAKnB,MAAMwB,QAE7CT,EAAMQ,GAAMF,SAAQ,SAACC,EAAKG,GACxBV,EAAMQ,GAAME,GAAQC,KAAKC,SAAW,EAAK3B,MAAM4B,0BAI5Cb,I,sCAKOT,GAAQ,IAAD,EACAF,KAAKJ,MAArBwB,EADgB,EAChBA,MAAOJ,EADS,EACTA,MACRL,EAAQX,KAAKS,MAAME,MAFF,EAGRT,EAAMuB,MAAM,KAAKC,IAAIC,QAHb,mBAGhBC,EAHgB,KAGbC,EAHa,KAMrB,SAASC,EAASF,EAAGC,GAGfD,GAAK,GAAKA,EAAIR,GAASS,GAAK,GAAKA,EAAIb,IACvCL,EAAMiB,GAAGC,IAAMlB,EAAMiB,GAAGC,IAK5BC,EAASF,EAAEC,GACXC,EAASF,EAAE,EAAGC,GACdC,EAASF,EAAE,EAAGC,GACdC,EAASF,EAAGC,EAAE,GACdC,EAASF,EAAGC,EAAE,GAOd,IAAInB,EAASC,EAAMoB,OAAM,SAACC,GAAD,OAAUA,EAAIC,UAAS,MAGhDjC,KAAKkC,SAAS,CAACvB,QAAOD,a,qCAGT,IAAD,OAgBZ,OAfgBV,KAAKS,MAAME,MAAMe,KAAI,SAACM,EAAKb,GAGzC,IAAIgB,EAAUH,EAAIN,KAAI,SAACU,EAAMf,GAC3B,IAAIjB,GAAiB,IAATgC,EACRC,EAAG,UAAMlB,EAAN,YAAcE,GACrB,OAAO,kBAAC,EAAD,CAAMpB,gBAAiB,EAAKA,gBAAiBoC,IAAKA,EAAKjC,MAAOA,EAAOF,MAAOmC,OAMrF,OAHAF,EAAU,wBAAIE,IAAKlB,GAAQgB,Q,+BAoB7B,OACMnC,KAAKS,MAAMC,OACT,yBAAKL,UAAU,eACb,yBAAKA,UAAU,UACb,0BAAMA,UAAU,eAAhB,OACA,0BAAMA,UAAU,aAAhB,UAIJ,6BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,aAAf,QAEF,2BAAOA,UAAU,SACf,+BACGiC,QAAQC,IAAIvC,KAAKS,MAAME,OACvBX,KAAKwC,sB,GAxHJjC,cAAdC,EAaGiC,aAAe,CACpBzB,MAAO,EACPI,MAAO,EACPI,oBAAqB,KAiHVhB,QChJAkC,G,6KARX,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,W,GAJUE,cCMEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.51917fce.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAround(this.props.coord);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    // TODO: create array-of-arrays of true/false values\n    //create empty outer array\n    let board = Array.from({length: this.props.nrows});\n  \n    //create arrays of false and fill in outer array\n    board.forEach((val, nrow) => {\n      // board[idx] = Array(this.props.ncols).fill(false);\n      board[nrow] = Array.from({length: this.props.ncols});\n\n      board[nrow].forEach((val, ncol) => {\n        board[nrow][ncol] = Math.random() < this.props.chanceLightStartsOn\n      });\n    });\n\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [x, y] = coord.split(\"-\").map(Number); //map(Number) converts each char to in key to number (type-casting)\n    //Number() is passed as callback which returns its arg as a number\n\n    function flipCell(x, y) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[x][y] = !board[x][y];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(x,y);\n    flipCell(x+1, y);\n    flipCell(x-1, y);\n    flipCell(x, y-1);\n    flipCell(x, y+1);\n    \n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    //iterating over outer array and chekcing no inner array should include true. If any does, loop breaks-\n    //-bcz of false return to every's callback func\n    let hasWon = board.every((row) => !row.includes(true));\n\n    // this.setState({board, hasWon});\n    this.setState({board, hasWon});\n  }\n\n  getGameBoard(){\n    let gameBoard = this.state.board.map((row, nrow) => {\n\n      //inner map will return an array of Cell components\n      let rowData = row.map((bool, ncol) => {\n        let isLit = bool === false ? false : true;\n        let key = `${nrow}-${ncol}`;\n        return <Cell flipCellsAround={this.flipCellsAround} key={key} isLit={isLit} coord={key}  />  \n      });\n\n      rowData = <tr key={nrow} >{rowData}</tr>;\n\n      //outer map will return an array of <tr>'s, each having an array(row) of Cell components\n      return rowData;\n    });\n\n    return gameBoard;\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    return(\n          this.state.hasWon ?\n            <div className='Board-title'>\n              <div className='winner'>\n                <span className='neon-orange'>YOU</span>\n                <span className='neon-blue'>WIN!</span>\n              </div>\n            </div> \n              :\n            <div>\n              <div className='Board-title'>\n                <div className='neon-orange'>Lights</div>\n                <div className='neon-blue'>Out</div>\n              </div>\n              <table className='Board'>\n                <tbody>\n                  {console.log(this.state.board)}\n                  {this.getGameBoard()}\n                </tbody>\n              </table>  \n            </div>\n    );\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}